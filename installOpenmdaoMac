#!/usr/bin/env bash
set -e

# first steps:

# 1 - Install Anaconda Python
# go to https://www.anaconda.com/distribution/
# download Anaconda3-2020.07-MacOSX-x86_64.sh
# run it:
#   bash ~/Downloads/Anaconda3-2020.07-MacOSX-x86_64.sh -b
#   conda init bash
#   then exit and restart your shell
# optionally, additionally get PyCharm for Anaconda here: https://www.jetbrains.com/pycharm/promo/anaconda
# set conda environment name to use for this installation here (it will be deleted and re-built):
export CONDAENV=openmdao

# 2 - clone OpenMDAO repositories on GitHub
# go to https://github.com, log into your account, and clone the two needed repos to your account:
#   https://github.com/OpenMDAO/OpenMDAO
#   https://github.com/OpenMDAO/dymos
# Git workflow:
#   1 - Work on code changes locally
#   2 - Push them to 'origin' (your GitHub fork) when you are ready to share work
#   3 - Do pull request to original ('upstream') repos on GitHub when ready to merge
#   4 - Pull 'upstream master' to update to latest
# set your GitHub user name here:
export GITHUBUSER=wright

# 3- obtain SNOPT source code (not open source) and extract it somewhere
# specify where here (relative to REPOS directory) [note SNOPT 7.5 had issues with XCode 12]:
export SNOPTSOURCE=../languages/snopt771

# 4 - specify the directory where you want the local repos to be created:
export REPOS=~/repos

# 5 - install OpenMPI and gfortran (part of gcc) using Homebrew
# see https://brew.sh for Homebrew installation
#   brew install openmpi gcc

# 6 - make sure Xcode is installed and selected
#   sudo xcode-select -s /Applications/Xcode.app

# delete old installations:
cd ${REPOS}
rm -rf OpenMDAO.git
rm -rf dymos

# delete and rebuild conda environment
eval "$(conda shell.bash hook)"  # enable conda commands in this bash script
conda deactivate
conda env remove --yes --name ${CONDAENV}
conda create --yes -n ${CONDAENV} python=3.7 anaconda
conda activate ${CONDAENV}
conda env list  # show environments; the current one will have an asterisk and should be ${CONDAENV}

# install additional conda packages
conda install --yes cython sphinx mock swig pip

# install pip packages
pip install --upgrade pip;
pip install numpy==1.18.1;  # downgrade
pip install scipy==1.4.1;   # downgrade
pip install mpi4py;  # don't use Anaconda's mpi, use Homebrew's
pip install petsc;   # expect "Building wheel" to fail, then it will eventually build a different way and succeed
pip install petsc4py;
pip install matplotlib;
pip install nose;
pip install networkx;
pip install testflo;  # get at least Jun 2020 version of decorator fix for mkdocs
pip install pyyaml;
pip install coveralls;
pip install --user travis-sphinx;
pip install sqlitedict;  # needed for Feb 2020 pyoptsparse
pip install mkdocs mkdocs-material pymdown-extensions mkdocs-macros-plugin mkdocs-bibtex;  # for mkdocs

# clone OpenMDAO from your GitHub fork
cd ${REPOS}
git clone https://github.com/${GITHUBUSER}/OpenMDAO.git ./OpenMDAO.git
cd OpenMDAO.git
git remote add upstream https://github.com/OpenMDAO/OpenMDAO.git
git fetch upstream
pip install -e .[all]

# clone Dymos from your GitHub fork
cd ${REPOS}
git clone https://github.com/${GITHUBUSER}/dymos.git ./dymos
cd dymos
git remote add upstream https://github.com/OpenMDAO/dymos.git
git remote add rob https://github.com/robfalck/dymos  # optionally add other team members to get their unmerged commits
git fetch upstream
pip install -e .

# use OpenMDAO script to install pyoptspare with SNOPT and IPOPT support
cd ${REPOS}
rm -rf ${REPOS}/Ipopt*
rm -rf ${REPOS}/ThirdParty-Metis*
rm -rf ${REPOS}/ThirdParty-Mumps*
rm -rf ${REPOS}/pyoptsparse*
rm -rf ${REPOS}/ipoptInstall  # this directory must be kept unless re-installing
rm -rf ${REPOS}/build_pyoptsparse
git clone https://github.com/OpenMDAO/build_pyoptsparse.git

./build_pyoptsparse/build_pyoptsparse.sh -p ${REPOS}/ipoptInstall -s ${SNOPTSOURCE}/src

# clean up
rm -rf ${REPOS}/Ipopt*
rm -rf ${REPOS}/ThirdParty-Metis*
rm -rf ${REPOS}/ThirdParty-Mumps*
rm -rf ${REPOS}/pyoptsparse*
rm -rf ${REPOS}/build_pyoptsparse

# OSX might have annoying firewall pop-up dialog boxes for each test.
# This can be fixed by using "Keychain Access" to create a personal signing certificate
# and then using the "codesign" program to sign the program it is complaining about, i.e.:
#   codesign -s "My Certificate" -f $(which python)

# run some tests to make sure installation is good

cd ${REPOS}

# force MPI off
unset OPENMDAO_REQUIRE_MPI

# test OpenMDAO including SNOPT
echo "##### OpenMDAO unit test"
python << END
import openmdao.api as om

# build the model
prob = om.Problem()

indeps = prob.model.add_subsystem('indeps', om.IndepVarComp())
indeps.add_output('x', 3.0)
indeps.add_output('y', -4.0)

prob.model.add_subsystem('paraboloid', om.ExecComp('f = (x-3)**2 + x*y + (y+4)**2 - 3'))

prob.model.connect('indeps.x', 'paraboloid.x')
prob.model.connect('indeps.y', 'paraboloid.y')

# setup the optimization
#prob.driver = om.ScipyOptimizeDriver()
#prob.driver.options['optimizer'] = 'SLSQP'
# enable SNOPT ----------
prob.driver = om.pyOptSparseDriver()
prob.driver.options['optimizer'] = 'SNOPT'
prob.driver.opt_settings['iSumm'] = 6
# -----------------------

prob.model.add_design_var('indeps.x', lower=-50, upper=50)
prob.model.add_design_var('indeps.y', lower=-50, upper=50)
prob.model.add_objective('paraboloid.f')

prob.setup()
prob.run_driver()

# minimum value
print('minimum\n', prob['paraboloid.f'])

# location of the minimum
print('indeps.x\n', prob['indeps.x'])
print('indeps.y\n', prob['indeps.y'])
END

# test MPI
# this is required, but not obvious:
export OPENMDAO_REQUIRE_MPI=1

echo "##### running MPI unit test"
python ${REPOS}/OpenMDAO.git/openmdao/vectors/tests/test_vector.py

echo "##### testing MPI import"
python << END
from openmdao.utils.mpi import MPI
print(MPI)
print(MPI != None)
END

echo "##### testing PETScVector import"
python << END
try:
    from openmdao.parallel_api import PETScVector
except ImportError:
    PETScVector = None
print(PETScVector)
print(PETScVector != None)
END

echo "You can run all the Dymos unit tests using testflo (skipping for now):"
echo "  testflo -n 1 --pre_announce dymos"

echo "Run the following when this script finishes to use the newly installed enviroment:"
echo "  conda activate ${CONDAENV}"
echo "  export OPENMDAO_REQUIRE_MPI=1"

# additional notes:

# - How to test documentation building? Watch for (non-MPI) errors in build output for things I have changed.
#    cd ${REPOS}/OpenMDAO.git/openmdao/docs && make clean && make all && open _build/html/index.html
#   Mkdocs documentation build:
#    cd dymos; testflo --pre_announce .  # runs tests first to generate output files
#      testflo is currently not handling the @save_for_docs decorator, so call each failing tests directly to generate output, e.g.:
#        testflo dymos/examples/brachistochrone/doc/test_doc_brachistochrone.py:TestBrachistochrone.test_brachistochrone
#    cd mkdocs; mkdocs build
#    open site/index.html

# - How to do issue tracking?
#    https://github.com/OpenMDAO/dymos/projects/10

# - How to run single unit tests locally? Also you can set "default test runner" to "Unittests" in PyCharm and right click to run
#      python unitTestFileName unitTestClassName.unitTestFunctionName
#    or in test file:
#      unittest.main(verbosity=2, defaultTest='TestSimpleGA.test_simple_test_func
#    or just run the PEP 8 test to look for code formating issues:
#      testflo ${REPOS}/dymos/dymos/test/test_pep8.py

# - Is it possible to run Travis checks locally, or from my Github fork before submitting a merge request?
#  see, for example dymos/.travis.yml (testflo runs all tests below current directory):
#      testflo -n 1 dymos --pre_announce --coverage --coverpkg dymos;
#      testflo -b -n 1 --pre_announce   # benchmark directory tests
#      python openmdao/code_review/test_lint_peps.py
#      python openmdao/code_review/test_lint_docstrings.py
#      python openmdao/code_review/test_lint_attributes.py
#  you can enable Travis testing on commits pushed to your GitHub master branch:
#      https://travis-ci.org/account/repositories
#      if you've logged into travis with your github account, you should be able to enable travis testing there

# - How is a MPI problem normally run? example:
#     mpirun -n 3 python ${REPOS}/dymos/dymos/examples/finite_burn_orbit_raise/test/test_ex_two_burn_orbit_raise.py TestExampleTwoBurnOrbitRaiseMPI.test_ex_two_burn_orbit_raise
